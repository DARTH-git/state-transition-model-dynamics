############################################################################################
### Cohort state-transition models in R: From conceptualization to implementation ## 2018 ##
############################################################################################
# This code forms the basis for the state-transition model of the article: 
# 'Cohort state-transition models in R: From conceptualization to implementation' 
# Authors: 
# Please cite the article when using this code
#
# To program this tutorial we made use of 
# R version 3.4.3 (2017-11-30)
# Platform: x86_64-apple-darwin15.6.0 (64-bit)
# Running under: macOS High Sierra 10.13.2
# RStudio: Version 1.1.383 2009-2017 RStudio, Inc

############################################################################################
################# Code of Appendix A #######################################################
############################################################################################
# Constructs a time-homogeneous implementation of the Sick-Sicker model                   #

#####################################################################################

rm(list = ls())      # clear memory (removes all the variables from the workspace)

#### 01 Load packages ####
library(reshape2) # to transform data
library(ggplot2)  # for nice looking plots
library(scales)   # for dollar labels

#### 02 Load Functions ####
# no functions required

#### 03 Input Model Parameters ####
## Strategy names
v.names.str <- c("No Treatment", "Treatment")  
## Number of strategies
n.str <- length(v.names.str)
## Markov model parameters
age     <- 25                  # age at baseline
max.age <- 55                  # maximum age of follow up
n.t <- max.age - age           # time horizon, number of cycles
v.n <- c("H", "S1", "S2", "D") # the 4 states of the model: 
# Healthy (H), Sick (S1), Sicker (S2), Dead (D)
n.s <- length(v.n)             # number of health states 

## Transition probabilities (per cycle) and hazard ratios
p.HD    <- 0.002 # constant probability of dying when healthy (all-cause mortality)
p.HS1   <- 0.15  # probability to become sick when healthy
p.S1H   <- 0.5   # probability to become healthy when sick
p.S1S2  <- 0.105 # probability to become sicker when sick
hr.S1   <- 3     # hazard ratio of death in S1 vs healthy
hr.S2   <- 10    # hazard ratio of death in S2 vs healthy 

## Cost and utility inputs 
# State rewards
c.H   <- 2000  # cost of remaining one cycle healthy 
c.S1  <- 4000  # cost of remaining one cycle sick 
c.S2  <- 15000 # cost of remaining one cycle sicker 
c.D   <- 0     # cost of being dead (per cycle)
c.Trt <- 12000 # cost of treatment (per cycle 

u.H   <- 1     # utility when healthy 
u.S1  <- 0.75  # utility when sick 
u.S2  <- 0.5   # utility when sicker
u.D   <- 0     # utility when healthy 
u.Trt <- 0.95  # utility when being treated

# Transition rewards
du.HS1 <- 0.01  # Disutility when transitioning from H to S1
ic.HS1 <- 1000  # Increase in cost when transitioning from H to S1
ic.D   <- 1000  # Increase in cost when dying

## Discounting factor
d.c <- d.e <- 0.03 # equal discount of costs and QALYs by 3%
# Discount weight vector (equal discounting is assumed for costs and effects)
v.dwc <- 1 / (1 + d.c) ^ (0:n.t) # calculate discount weights for costs for each cycle based on discount rate d.r
v.dwe <- 1 / (1 + d.e) ^ (0:n.t) # calculate discount weights for effectiveness for each cycle based on discount rate d.r

# Transition probability to dead from S1 and S2
p.S1D  <- 1-exp(log(1 - p.HD) * hr.S1) # probability to die in S1
p.S2D  <- 1-exp(log(1 - p.HD) * hr.S2) # probability to die in S2

#### 04 Define and initialize matrices and vectors ####
#### 04.1 Transition probability MATRIX ####
# Initialize matrix
m.P <- matrix(0, 
              nrow = n.s, ncol = n.s, 
              dimnames = list(v.n, v.n))
# Fill in matrix
# From H
m.P["H", "H"]  <- 1 - (p.HS1 + p.HD)
m.P["H", "S1"] <- p.HS1
m.P["H", "D"]  <- p.HD
# From S1
m.P["S1", "H"]  <- p.S1H
m.P["S1", "S1"] <- 1 - (p.S1H + p.S1S2 + p.S1D)
m.P["S1", "S2"] <- p.S1S2
m.P["S1", "D"]  <- p.S1D
# From S2
m.P["S2", "S2"] <- 1 - p.S2D
m.P["S2", "D"]  <- p.S2D
# From D
m.P["D", "D"] <- 1

#### Solve Markov model using fundamental matrix solution ####
## Non-absorbing state matrices
m.Q <- m.P[1:3, 1:3]
m.Q

## Fundamental matrices
m.N <- solve(diag(n.s-1) - m.Q)
m.N

#### 04.2 Initial state vector ####
# All starting healthy
s0 <- c(H = 1, S1 = 0, S2 = 0, D = 0)
s0

#### 04.3 Cohort trace ####
## Create the markov trace matrix M capturing the proportion of the cohort in each state at each cycle
# Initialize cohort trace
m.M <- matrix(0, 
              nrow = (n.t+1), ncol = n.s, 
              dimnames = list(0:n.t, v.n))
m.M[1, ] <- s0

#### 05 Run Markov model ####
for(t in 1:n.t){                  # loop through the number of cycles
  m.M[t+1, ] <- m.M[t, ] %*% m.P  # estimate the state vector for the next cycle (t + 1)
}
head(round(m.M, 3))

#### 06 Compute and Plot Epidemiological Outcomes ####
#### 06.1 Cohort trace #####
ggplot(melt(m.M), aes(x = Var1, y = value, color = Var2)) +
  geom_line(size = 1.3) +
  scale_color_discrete(l = 50, name = "Health state") +
  xlab("Cycle") +
  ylab("Proportion of the cohort") +
  theme_bw(base_size = 16) +
  theme()

#### 07 Compute Cost-Effectiveness Outcomes ####
#### 07.1 State rewards for each strategy ####
## Vector of state utilities under usual care
v.u.UC <- c(H = u.H, S1 = u.S1, S2 = u.S2, D = u.D)
## Vector of state costs under usual care
v.c.UC <- c(H = c.H, S1 = c.S1, S2 = c.S2, D = c.D)

## Vector of state utilities under new treatment
v.u.Tr <- c(H = u.H, S1 = u.Trt, S2 = u.S2, D = u.D)
## Vector of state costs under new treatment
v.c.Tr <- c(H = c.H, S1 = c.S1 + c.Trt, S2 = c.S2 + c.Trt, D = c.D)

#### 07.2 Expected QALYs and Costs per cycle for each strategy ####
## Vector of qalys under usual care
v.qaly.UC <- m.M %*% v.u.UC
## Vector of costs under usual care
v.cost.UC <- m.M %*% v.c.UC
## Vector of qalys under new treatment
v.qaly.Tr <- m.M %*% v.u.Tr
## Vector of costs under new treatment
v.cost.Tr <- m.M %*% v.c.Tr


#### 07.3 Total expected QALYs and Costs ####
## Expected qalys under usual care
qaly.UC <- t(v.qaly.UC) %*% v.dwe
## Expected costs under usual care
cost.UC <- t(v.cost.UC) %*% v.dwc
## Expected qalys under new treatment
qaly.Tr <- t(v.qaly.Tr) %*% v.dwe
## Expected costs under new treatment
cost.Tr <- t(v.cost.Tr) %*% v.dwc

#### Cost-effectiveness analysis ####
### Vector of costs
v.cost <- c(cost.UC, cost.Tr)
### Vector of effectiveness
v.qaly <- c(qaly.UC, qaly.Tr)

### Incremental outcomes
delta.C <- v.cost[2] - v.cost[1]             # calculate incremental costs
delta.E <- v.qaly[2] - v.qaly[1]             # calculate incremental QALYs
ICER    <- delta.C / delta.E                 # calculate the ICER
results <- c(delta.C, delta.E, ICER)         # store the values in a new variable

# Create full incremental cost-effectiveness analysis table
table_cstm <- data.frame(
  Costs = dollar(v.cost),
  QALYs = round(v.qaly, 3),
  `Incremental Costs` = c("", dollar(delta.C)),
  `Incremental QALYS` = c("", round(delta.E, 3)),
  ICER = c("", dollar(ICER))
)
rownames(table_cstm) <- v.names.str

table_cstm  # print the table 
