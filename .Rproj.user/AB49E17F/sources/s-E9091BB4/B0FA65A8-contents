############################################################################################
### Cohort state-transition models in R: From conceptualization to implementation ## 2018 ##
############################################################################################
# This code forms the basis for the state-transition model of the article: 
# 'Cohort state-transition models in R: From conceptualization to implementation' 
# Authors: 
# Please cite the article when using this code
#
# To program this tutorial we made use of 
# R version 3.4.3 (2017-11-30)
# Platform: x86_64-apple-darwin15.6.0 (64-bit)
# Running under: macOS High Sierra 10.13.2
# RStudio: Version 1.1.383 2009-2017 RStudio, Inc

############################################################################################
################# Code of Appendix A #######################################################
############################################################################################
# Constructs a time-dependent implementation of the Sick-Sicker model                      #

##################################### Initial setup ########################################
#rm(list = ls())  # remove any variables in R's memory 
library(dplyr) # to manipulate data
library(reshape2) # to transform data
library(ggplot2) # for nice looking plots
library(scales)  # for dollar signs and commas

##################################### Model input #########################################
## General setup
age     <- 25         # age at baseline
max.age <- 55         # maximum age of follow up
n.t <- max.age - age # time horizon, number of cycles
v.n <- c("H", "S1", "S2", "D") # the 4 health states of the model:
# Healthy (H), Sick (S1), Sicker (S2), Dead (D)
n.s <- length(v.n) # number of health states 
d.c <- d.e <- 0.03 # equal discount of costs and QALYs by 3%
v.names.str <- c("No Treatment", "Treatment") # store the strategy names

## Transition probabilities (per cycle)
p.HS1   <- 0.15  # probability to become sick when healthy
p.S1H   <- 0.5   # probability to become healthy when sick
p.S1S2  <- 0.105 # probability to become sicker when sick
hr.S1   <- 3     # hazard ratio of death in S1 vs healthy
hr.S2   <- 10    # hazard ratio of death in S2 vs healthy 

## Age-dependent mortality rates
lt.usa.2005 <- read.csv("data/LifeTable_USA_Mx_2015.csv")
r.mu <- lt.usa.2005 %>% 
  # filter(Age >= age & Age <= max.age) %>%
  select(Total) %>%
  as.matrix()

## Cost and utility inputs 
# State rewards
c.H   <- 2000  # cost of remaining one cycle healthy 
c.S1  <- 4000  # cost of remaining one cycle sick 
c.S2  <- 15000 # cost of remaining one cycle sicker 
c.D   <- 0     # cost of being dead (per cycle)
c.Trt <- 12000 # cost of treatment (per cycle 

u.H   <- 1     # utility when healthy 
u.S1  <- 0.75  # utility when sick 
u.S2  <- 0.5   # utility when sicker
u.D   <- 0     # utility when healthy 
u.Trt <- 0.95  # utility when being treated

# Transition rewards
du.HS1 <- 0.01  # Disutility when transitioning from H to S1
ic.HS1 <- 1000  # Increase in cost when transitioning from H to S1
ic.D   <- 1000  # Increase in cost when dying

# Discount weight (equal discounting is assumed for costs and effects)
v.dwc <- 1 / ((1 + d.e) ^ (0:(n.t)))
v.dwe <- 1 / ((1 + d.c) ^ (0:(n.t)))

# Age-specific transition probabilities
p.HDage  <- 1 - exp(-r.mu[(age + 1) + 0:(n.t - 1)])
p.S1Dage <- 1 - exp(-r.mu[(age + 1) + 0:(n.t - 1)] * hr.S1)
p.S2Dage <- 1 - exp(-r.mu[(age + 1) + 0:(n.t - 1)] * hr.S2)

############################# Construct State-transition models ###########################
#### Create transition matrix ####
# Initialize array
a.P <- array(0, dim = c(n.s, n.s, n.t),
             dimnames = list(v.n, v.n, 0:(n.t-1)))
# Fill in array
# From H
a.P["H", "H", ]  <- 1 - (p.HS1 + p.HDage)
a.P["H", "S1", ] <- p.HS1
a.P["H", "D", ]  <- p.HDage
# From S1
a.P["S1", "H", ]  <- p.S1H
a.P["S1", "S1", ] <- 1 - (p.S1H + p.S1S2 + p.S1Dage)
a.P["S1", "S2", ] <- p.S1S2
a.P["S1", "D", ]  <- p.S1Dage
# From S2
a.P["S2", "S2", ] <- 1 - p.S2Dage
a.P["S2", "D", ]  <- p.S2Dage
# From D
a.P["D", "D", ] <- 1

#### Run Markov model ####
## Initial state vector
# All starting healthy
s0 <- c(H = 1, S1 = 0, S2 = 0, D = 0)
s0

## Initialize cohort trace for time-dependent (td) STM
m.M.td <- matrix(0, 
                 nrow = (n.t + 1), ncol = n.s, 
                 dimnames = list(0:n.t, v.n))
# Set first row of M with the initial state vector
m.M.td[1, ] <- s0

## Initialize transition array
a.A <- array(0, 
             dim = c(n.s, n.s, n.t + 1),
             dimnames = list(v.n, v.n, 0:n.t))
# Set first slice of A with the initial state vector in its diagonal
diag(a.A[, , 1]) <- s0

## Iterate Markov model over time
for(t in 1:n.t){
  m.M.td[t + 1, ] <- m.M.td[t, ] %*% a.P[, , t]
  a.A[,, t + 1]   <- m.M.td[t, ]  *  a.P[,, t]
}

#### Plot Outputs ####
### Cohort trace
ggplot(melt(m.M.td), aes(x = Var1, y = value, color = Var2)) +
  geom_line(size = 1.3) +
  scale_color_discrete(l = 50, name = "Health state") +
  xlab("Cycle") +
  ylab("Proportion of the cohort") +
  theme_bw(base_size = 16) +
  theme()

#### State and Transition Rewards ####
### State rewards
## Vector of state utilities under usual care
v.u.UC <- c(H = u.H, S1 = u.S1, S2 = u.S2, D = u.D)
## Vector of state costs under usual care
v.c.UC <- c(H = c.H, S1 = c.S1, S2 = c.S2, D = c.D)

## Vector of state utilities under new treatment
v.u.Tr <- c(H = u.H, S1 = u.Trt, S2 = u.S2, D = u.D)
## Vector of state costs under new treatment
v.c.Tr <- c(H = c.H, S1 = c.S1 + c.Trt, S2 = c.S2 + c.Trt, D = c.D)

### Transition rewards
## Matrix of state and transition utilities under usual care
m.u.UC <- matrix(rep(v.u.UC, n.s), 
                 ncol = n.s, byrow = TRUE,
                 dimnames = list(v.n, v.n))
# Add disutility due to transition from H to S1
m.u.UC["H", "S1"] <- m.u.UC["H", "S1"] - du.HS1

## Matrix of state and transition costs under usual care
m.c.UC <- matrix(rep(v.c.UC, n.s), 
                 ncol = n.s, byrow = TRUE,
                 dimnames = list(v.n, v.n))
# Add transition cost due to transition from H to S1
m.c.UC["H", "S1"] <- m.c.UC["H", "S1"] + ic.HS1
# Add transition cost of dying from all non-dead states
m.c.UC[-n.s, "D"] <- m.c.UC[-n.s, "D"] + ic.D

## Matrix of state and transition utilities under new treatment
m.u.Tr <- matrix(rep(v.u.Tr, n.s), 
                 ncol = n.s, byrow = TRUE,
                 dimnames = list(v.n, v.n))
# Add disutility due to transition from H to S1
m.u.Tr["H", "S1"] <- m.u.Tr["H", "S1"] - du.HS1

## Matrix of state and transition costs under usual care
m.c.Tr <- matrix(rep(v.c.Tr, n.s), 
                 ncol = n.s, byrow = TRUE,
                 dimnames = list(v.n, v.n))
# Add transition cost due to transition from H to S1
m.c.Tr["H", "S1"] <- m.c.Tr["H", "S1"] + ic.HS1
# Add transition cost of dying from all non-dead states
m.c.Tr[-n.s, "D"] <- m.c.Tr[-n.s, "D"] + ic.D

#### Expected QALYs and Costs per cycle ####
library(tensorA) # to use tensor algebra
## Vector of qalys under usual care
v.qaly.UC <- rowSums(t(colSums(to.tensor(a.A) * to.tensor(m.u.UC))))
## Vector of costs under usual care
v.cost.UC <- rowSums(t(colSums(to.tensor(a.A) * to.tensor(m.c.UC))))
## Vector of qalys under new treatment
v.qaly.Tr <- rowSums(t(colSums(to.tensor(a.A) * to.tensor(m.u.Tr))))
## Vector of costs under new treatment
v.cost.Tr <- rowSums(t(colSums(to.tensor(a.A) * to.tensor(m.c.Tr))))

################################# Cost-effectiveness analysis #############################
### Vector of costs
v.cost <- c(cost.UC, cost.Tr)
### Vector of effectiveness
v.qaly <- c(qaly.UC, qaly.Tr)

### Incremental outcomes
delta.C <- v.cost[2] - v.cost[1]             # calculate incremental costs
delta.E <- v.qaly[2] - v.qaly[1]             # calculate incremental QALYs

### ICER
ICER    <- delta.C / delta.E                 # calculate the ICER

### Table of outputs
# Create full incremental cost-effectiveness analysis table
table_cstm <- data.frame(
  Costs = dollar(v.cost),
  QALYs = round(v.qaly, 3),
  `Incremental Costs` = c("-", dollar(delta.C)),
  `Incremental QALYS` = c("-", round(delta.E, 3)),
  ICER = c("-", paste0(dollar(ICER),"/QALY"))
)
rownames(table_cstm) <- v.names.str
colnames(table_cstm) <- c("Costs", "QALYs","Incremental Costs", "QALYs Gained", "ICER") # name the columns
table_cstm  # print the table 

