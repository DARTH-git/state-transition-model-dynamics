"0","rm(list = ls())  # remove any variables in R's memory "
"0","#### 01.1 Load packages and functions ####"
"0","library(reshape2) # to transform data"
"0","library(ggplot2)  # for nice looking plots"
"0","#### 01.2.1 General setup ####"
"0","n.age.init  <- 70  # age of starting cohort"
"0","n.t         <- 50  # time horizon, number of cycles"
"0","v.age.names <- n.age.init:(n.age.init + n.t - 1) # vector with age names"
"0","v.n <- c(""H"", ""S"", ""D"") # vector with the 3 health states of the model:"
"0","# Healthy (H), Sick (S), Dead (D)"
"0","n.states <- length(v.n) # number of health states "
"0","v.s.init <- c(H = 1, S = 0, D = 0) # initial state vector"
"0","#### 01.1.2 Load functions ####"
"0","source(""../functions/01_model-inputs_functions.R"")"
"0","source(""../functions/02_simulation-model_functions.R"")"
"0","#### 01.2.3 Generate initial set of base-case external parameters ####"
"0","df.params.init <- f.generate_init_params()"
"0","## Create name of parameters"
"0","df.names.params <- names(df.params.init)"
"0","#### 02.1 Transition probability matrix ####"
"0","# matrix m.P at the first cycle"
"0","m.P <- f.create_transition_prob_matrix(df.params = df.params.init) "
"0","#### 02.2 Initial state vector ####"
"0","# the cohort start in the Healthy health state"
"0","s0 <- c(H = 1, S = 0, D = 0)"
"0","#### 02.3 Cohort trace  "
"0","## Create the Markov cohort trace matrix m.M capturing the proportion of the cohort"
"0","# in each state at each cycle"
"0","m.M <- matrix(0,  # initialize cohort trace"
"0","              nrow = (n.t + 1), ncol = n.states, "
"0","              dimnames = list(0:n.t, v.n))"
"0","m.M[1, ] <- s0   # store the initial state vector"
"0","# Equation 3   "
"0","for(t in 1:n.t){  # loop through the number of cycles"
"0","  # estimate the state vector for the next cycle (t + 1)"
"0","  m.M[t + 1, ] <- m.M[t, ] %*% m.P  "
"0","}"
"0","######################### Dynamics array approach #####################################"
"0","a.A <- array(0, dim = c(n.states, n.states, n.t + 1),"
"0","             dimnames = list(v.n, v.n, 0:n.t)) # initialize array"
"0","diag(a.A[, , 1]) <- s0 # store the initial state vector in the diagonal of A"
"0","#### Equation 4  ####"
"0","# run the model "
"0","for(t in 1:n.t){                     # loop through the number of cycles"
"0","  a.A[, , t + 1] <- colSums(a.A[, , t]) * m.P  # fill array A for t + 1 "
"0","}"
"0","#### Equation 8 ####"
"0","# Generate matrix M from array A "
"0","m.M_A <- t(colSums(a.A))   # sum over the columns of a.A and transpose "
"0","#### Equation 9  ####"
"0","#### 05.1 Create reward matrices for both costs and effects #### "
"0","m.R_costs   <- f.create_transition_reward_matrix_costs(df.params = df.params.init)"
"0","m.R_effects <- f.create_transition_reward_matrix_effects(df.params = df.params.init)"
"0","#### Equation 10 ####"
"0","#### 05.2 Expected QALYs and Costs per cycle for each strategy ####"
"0","a.O_costs <- a.O_effects <- array(0, dim = c(n.states, n.states, n.t + 1),"
"0","             dimnames = list(v.n, v.n, 0:n.t))"
"0","for(t in 1:n.t){ "
"0","# iterative element-wise-multiplication of array A with the rewards matrices"
"0","a.O_costs[, , t]   <- a.A[, , t] * m.R_costs   "
"0","a.O_effects[, , t] <- a.A[, , t] * m.R_effects "
"0","}"
"0","#### Equation 11 ####"
"0","v.Costs <- rowSums(t(colSums(a.O_costs)))   # calculate the expected costs per cycle"
"0","v.QALYs <- rowSums(t(colSums(a.O_effects))) # calculate the expected QALYs per cycle"
"0","TC <- sum(v.Costs)  # calculate the total expected costs"
"0","TE <- sum(v.QALYs)  # calculate the total expected QALYS"
"0","v.Results <- c(TC, TE)       # combine the total expected costs and QALYs"
"0","names(v.Results) <- c(""Costs"", ""Effectiveness"") # name the vector"
"0","v.Results                    # print the results  "
"1","        Costs "
"1","Effectiveness "
"1","
"
"1","   28226.5593 "
"1","      14.2835 "
"1","
"
"0","# Create a plot of the cohort trace "
"0","ggplot(melt(m.M), aes(x = Var1, y = value, color = Var2)) +"
"0","  geom_line(size = 1.3) +"
"0","  scale_color_discrete(l = 50, name = ""Health state"", h = c(45, 365)) +"
"0","  xlab(""Cycle"") +"
"0","  ylab(""Proportion of the cohort"") +"
"0","  theme_bw(base_size = 16) +"
"0","  scale_x_continuous(name = ""Cycles"", limits = c(0, n.t), breaks = seq(0, n.t, 10)) +"
"0","  theme()"
