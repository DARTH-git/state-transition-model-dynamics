f.create_transition_prob_matrix <- function(v.params, t = 1){# User defined
  ### Arguments:  
  #     v.params: vector of model parameters 
  #     t: current cycle
  ### Returns
  #     m.P: the transition probability matrix 
  with(as.list(v.params), {
    #### Age-specific transition probabilities ####
    # Mortality for healthy individuals
    p.HDage  <- 1 - exp(-v.r.asr[(n.age.init + 1) + 0:(n.t - 1)])        
    # Mortality for sick individuals
    p.S1Dage <- 1 - exp(-v.r.asr[(n.age.init + 1) + 0:(n.t - 1)] * hr.S1)
    # Mortality for sicker individuals
    p.S2Dage <- 1 - exp(-v.r.asr[(n.age.init + 1) + 0:(n.t - 1)] * hr.S2)
    
    #### Create age-specific transition matrices ####
    # Initialize matrix
    m.P <- matrix(NA, 
                  nrow = n.states, ncol = n.states, 
                  dimnames = list(v.n, v.n))
    
    # Fill in matrix
    # From H
    m.P["H", "H"]   <- 1 - (p.HS1 + p.HDage[t])
    m.P["H", "S1"]  <- p.HS1
    m.P["H", "S2"]  <- 0
    m.P["H", "D"]   <- p.HDage[t]
    # From S1
    m.P["S1", "H"]  <- p.S1H
    m.P["S1", "S1"] <- 1 - (p.S1H + p.S1S2 + p.S1Dage[t])
    m.P["S1", "S2"] <- p.S1S2
    m.P["S1", "D"]  <- p.S1Dage[t]
    # From S2
    m.P["S2", "H"]  <- 0
    m.P["S2", "S1"] <- 0
    m.P["S2", "S2"] <- 1 - p.S2Dage[t]
    m.P["S2", "D"]  <- p.S2Dage[t]
    # From D
    m.P["D", "H"]  <- 0
    m.P["D", "S1"] <- 0
    m.P["D", "S2"] <- 0
    m.P["D", "D"]  <- 1
    
    return(m.P)
  }
  )
}

f.create_transition_reward_matrix_costs <- function(v.params, t = 1){# User defined
  ### Arguments:  
  #     v.params: vector of model parameters 
  #     t: current cycle
  ### Returns
  #     m.P: the transition probability matrix 
  with(as.list(v.params), {
    
    #### Create age-specific transition matrices ####
    # Initialize matrix
    m.R <- matrix(NA, 
                  nrow = n.states, ncol = n.states, 
                  dimnames = list(v.n, v.n))
    
    # Fill in matrix
    # From H
    m.R["H", "H"]   <- c.H
    m.R["H", "S1"]  <- c.H
    m.R["H", "S2"]  <- c.H
    m.R["H", "D"]   <- c.H + ic.D
    # From S1
    m.R["S1", "H"]  <- c.S1
    m.R["S1", "S1"] <- c.S1
    m.R["S1", "S2"] <- c.S1
    m.R["S1", "D"]  <- c.S1 + ic.D
    # From S2
    m.R["S2", "H"]  <- c.S2
    m.R["S2", "S1"] <- c.S2
    m.R["S2", "S2"] <- c.S2
    m.R["S2", "D"]  <- c.S2 + ic.D
    # From D
    m.R["D", "H"]   <- c.D
    m.R["D", "S1"]  <- c.D
    m.R["D", "S2"]  <- c.D
    m.R["D", "D"]   <- c.D 
    
    return(m.R)
  }
  )
}

f.create_transition_reward_matrix_effects <- function(v.params, t = 1){# User defined
  ### Arguments:  
  #     v.params: vector of model parameters 
  #     t: current cycle
  ### Returns
  #     m.P: the transition probability matrix 
  with(as.list(v.params), {
    
    #### Create age-specific transition matrices ####
    # Initialize matrix
    m.R <- matrix(NA, 
                  nrow = n.states, ncol = n.states, 
                  dimnames = list(v.n, v.n))
    
    # Fill in matrix
    # From H
    m.R["H", "H"]   <- u.H
    m.R["H", "S1"]  <- u.H + ic.HS1
    m.R["H", "S2"]  <- u.H
    m.R["H", "D"]   <- u.H 
    # From S1
    m.R["S1", "H"]  <- u.S1
    m.R["S1", "S1"] <- u.S1
    m.R["S1", "S2"] <- u.S1
    m.R["S1", "D"]  <- u.S1 
    # From S2
    m.R["S2", "H"]  <- u.S2
    m.R["S2", "S1"] <- u.S2
    m.R["S2", "S2"] <- u.S2
    m.R["S2", "D"]  <- u.S2 
    # From D
    m.R["D", "H"]   <- u.D
    m.R["D", "S1"]  <- u.D
    m.R["D", "S2"]  <- u.D
    m.R["D", "D"]   <- u.D 
    
    return(m.R)
  }
  )
}